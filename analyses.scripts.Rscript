require(caper)
require(phytools)
require(phylometrics)
require(diversitree)

load("all.data.Rdata")

set.seed(123)

### Tests of phylogenetic signal in continuous traits

print("Starting phylogenetic signal analyses")

# Colour dichromatism
phylosig(tr925, dat925[tr925$tip.label,]$ColDichrom, method = "K", test = T)
phylosig(tr925, dat925[tr925$tip.label,]$ColDichrom, method = "lambda", test = T)

# Body mass
phylosig(tr925, dat925[tr925$tip.label,]$LogBodyMass, method = "K", test = T)
phylosig(tr925, dat925[tr925$tip.label,]$LogBodyMass, method = "lambda", test = T)

# HWI
phylosig(tr925, dat925[tr925$tip.label,]$hwi, method = "K", test = T)
phylosig(tr925, dat925[tr925$tip.label,]$hwi, method = "lambda", test = T)

# Brain size
brdat <- dat925[!is.na(dat925$BrainSize),]
brtr <- drop.tip(tr925, tr925$tip.label[which(!tr925$tip.label %in% rownames(brdat))])
phylosig(brtr, brdat[brtr$tip.label,]$BrainSize, method = "K", test = T)
phylosig(brtr, brdat[brtr$tip.label,]$BrainSize, method = "lambda", test = T)

### Tests of phylogenetic signal in binary traits

dat925$species <- rownames(dat925)
datcomp <- comparative.data(phy = tr925, data = dat925, names.col=species)

# Carnivory
datfpdcarn <- phylo.d(data=datcomp, binvar = Carnivore, permut = 1000)

# Urban colonization
datfpd <- phylo.d(data=datcomp, binvar = Urban, permut = 1000)

# Plot results of test of phylogenetic signal in urban colonization
#plot(datfpd)

### BiSSE analyses

print("Starting BiSSE analyses")

tr925 <- ladderize(tr925)
sampfrac1 <- 925 / 5966
urban1 <- dat925$Urban
names(urban1) <- rownames(dat925)

# BiSSE model where traits differ in sp, ext, and trans; a type of null.

bislik <- make.bisse(tr925, urban1, sampling.f=sampfrac1)
p <- starting.point.bisse(tr925)
fit.full <- find.mle(bislik, p)

# BiSSE	 model where traits do not differ in sp, ext, and trans; the BASELINE model, or LABILE if transition rates are high.

lik.base <- constrain(bislik, lambda0 ~ lambda1, mu0 ~ mu1, q01 ~ q10)
fit.base <- find.mle(lik.base, p[argnames(lik.base)])

# BiSSE  model where traits do not differ in sp or trans, but differ in	ext. This is the DEAD END model.

lik.de <- constrain(bislik, lambda0 ~ lambda1, q01 ~ q10)
fit.de <- find.mle(lik.de, p[argnames(lik.de)])

# BiSSE  model where traits do not differ in sp, but differ in ext and trans. This is the SUICIDE model.

lik.su <- constrain(bislik, lambda0 ~ lambda1)
fit.su <- find.mle(lik.su, p[argnames(lik.su)])

# BiSSE  model where traits do not differ in ext or trans, but differ in sp. This is the LONELY model.

lik.lo <- constrain(bislik, mu0 ~ mu1, q01 ~ q10)
fit.lo <- find.mle(lik.lo, p[argnames(lik.lo)])

# BiSSE  model where traits do not differ in sp or ext rates, but differ in trans. This is the IRREVERSIBLE model.

lik.ir <- constrain(bislik, lambda0 ~ lambda1, mu0 ~ mu1)
fit.ir <- find.mle(lik.ir, p[argnames(lik.ir)])

# BiSSE  model where traits do not differ in extinction rates, but differ in sp and trans. This is the SOURCE model.

lik.so <- constrain(bislik, mu0 ~ mu1)
fit.so <- find.mle(lik.so, p[argnames(lik.so)])

# BiSSE  model where traits do not differ in trans rates, but differ in sp and ext. This is the TURNOVER model.

lik.tur <- constrain(bislik, q01 ~ q10)
fit.tur <- find.mle(lik.tur, p[argnames(lik.tur)])

modelstable <- round(rbind(base=coef(fit.base, TRUE), deadend = coef(fit.de, TRUE), lone = coef(fit.lo, TRUE), irrev = coef(fit.ir, TRUE), turn = coef(fit.tur, TRUE), suic = coef(fit.su, TRUE), sourc = coef(fit.so, TRUE), full = coef(fit.full, TRUE)), 3)
modelstest <- anova(fit.base, deadend = fit.de, lone = fit.lo, irrev = fit.ir, turn = fit.tur, suic = fit.su, sourc = fit.so, full = fit.full)
pvals <- round(p.adjust(modelstest[2:8,5], method = "fdr", n = 7), 4)

### Plot reconstructed states from BiSSE model REDO TREE!!!

#urbanasr <- asr.marginal(lik.so, coef(fit.so))
#urbanasrvec <- apply(urbanasr, 2, function(x) which(x == max(x)))
#rbPal <- colorRampPalette(c('red', 'black'))
#colvar2 <- topo.colors(10)[as.numeric(cut(as.vector(urbanasr[1,]), breaks = 10))]
#urban2 <- urban1
#urban2[urban1 == 0] <- topo.colors(10)[9]
#urban2[urban1 == 1] <- topo.colors(10)[1]
#pdf("urban.tree.506.topocols.pdf", useDingbats = F, height = 10, width = 10)
#plot(tr925, type = "fan", show.tip.label=FALSE, no.margin=TRUE, edge.width = 2)
#tiplabels(col=urban2[tr925$tip.label], pch=19, adj=0.5)
#nodelabels(col=colvar2, pch=19)
#dev.off()

### Phylometrics

print("Starting phylometrics analyses. 10% sampling")

sscd.obs <- treestat(tr925, state=urban1[tr925$tip.label], func=sscd)
noto.obs <- treestat(tr925, state=urban1[tr925$tip.label], func=noto)

# Simulate data under two models: The baseline, and the best-fitting source model. First assuming that 10% birds are urban:

urbsamp.f1 <- 590 / (0.1 * 5966)
nurbsamp.f1 <- 335 / (0.9 * 5966)

sims.bisse1 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f1, urbsamp.f1)), simplify = F))
names(sims.bisse1) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd1 <- lapply(1:7, function(x) lapply(sims.bisse1[[x]], treestat, func = sscd))
stat.noto1 <- lapply(1:7, function(x) lapply(sims.bisse1[[x]], treestat, func = noto))
pval.sscd1 <- sapply(1:7, function(x) min(sum(stat.sscd1[[x]] >= sscd.obs), sum(stat.sscd1[[x]] <= sscd.obs)) / length(stat.sscd1[[x]]))
pval.noto1 <- sapply(1:7, function(x) min(sum(stat.noto1[[x]] <= noto.obs), sum(stat.noto1[[x]] >= noto.obs)) / length(stat.noto1[[x]]))

# Urban species are 20%

print("20% sampling")

urbsamp.f2 <- 590 / (0.2 * 5966)
nurbsamp.f2 <- 335 / (0.8 * 5966)

sims.bisse2 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f2, urbsamp.f2)), simplify = F))
names(sims.bisse2) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd2 <- lapply(1:7, function(x) lapply(sims.bisse2[[x]], treestat, func = sscd))
stat.noto2 <- lapply(1:7, function(x) lapply(sims.bisse2[[x]], treestat, func = noto))
pval.sscd2 <- sapply(1:7, function(x) min(sum(stat.sscd2[[x]] >= sscd.obs), sum(stat.sscd2[[x]] <= sscd.obs)) / length(stat.sscd2[[x]]))
pval.noto2 <- sapply(1:7, function(x) min(sum(stat.noto2[[x]] <= noto.obs), sum(stat.noto2[[x]] >= noto.obs)) / length(stat.noto2[[x]]))

# Urban species are 30%

print("30% sampling")

urbsamp.f3 <- 590 / (0.3 * 5966)
nurbsamp.f3 <- 335 / (0.7 * 5966)

sims.bisse3 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f3, urbsamp.f3)), simplify = F))
names(sims.bisse3) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd3 <- lapply(1:7, function(x) lapply(sims.bisse3[[x]], treestat, func = sscd))
stat.noto3 <- lapply(1:7, function(x) lapply(sims.bisse3[[x]], treestat, func = noto))
pval.sscd3 <- sapply(1:7, function(x) min(sum(stat.sscd3[[x]] >= sscd.obs), sum(stat.sscd3[[x]] <= sscd.obs)) / length(stat.sscd3[[x]]))
pval.noto3 <- sapply(1:7, function(x) min(sum(stat.noto3[[x]] <= noto.obs), sum(stat.noto3[[x]] >= noto.obs)) / length(stat.noto3[[x]]))

# Urban species are 40%

print("40% sampling")

urbsamp.f4 <- 590 / (0.4 * 5966)
nurbsamp.f4 <- 335 / (0.6 * 5966)

sims.bisse4 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f4, urbsamp.f4)), simplify = F))
names(sims.bisse4) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd4 <- lapply(1:7, function(x) lapply(sims.bisse4[[x]], treestat, func = sscd))
stat.noto4 <- lapply(1:7, function(x) lapply(sims.bisse4[[x]], treestat, func = noto))
pval.sscd4 <- sapply(1:7, function(x) min(sum(stat.sscd4[[x]] >= sscd.obs), sum(stat.sscd4[[x]] <= sscd.obs)) / length(stat.sscd4[[x]]))
pval.noto4 <- sapply(1:7, function(x) min(sum(stat.noto4[[x]] <= noto.obs), sum(stat.noto4[[x]] >= noto.obs)) / length(stat.noto4[[x]]))

# Urban species are 50%

print("50% sampling")

urbsamp.f5 <- 590 / (0.5 * 5966)
nurbsamp.f5 <- 335 / (0.5 * 5966)

sims.bisse5 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f5, urbsamp.f5)), simplify = F))
names(sims.bisse5) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd5 <- lapply(1:7, function(x) lapply(sims.bisse5[[x]], treestat, func = sscd))
stat.noto5 <- lapply(1:7, function(x) lapply(sims.bisse5[[x]], treestat, func = noto))
pval.sscd5 <- sapply(1:7, function(x) min(sum(stat.sscd5[[x]] >= sscd.obs), sum(stat.sscd5[[x]] <= sscd.obs)) / length(stat.sscd5[[x]]))
pval.noto5 <- sapply(1:7, function(x) min(sum(stat.noto5[[x]] <= noto.obs), sum(stat.noto5
[[x]] >= noto.obs)) / length(stat.noto5[[x]]))

# Urban species are 60%

print("60% sampling")

urbsamp.f6 <- 590 / (0.6 * 5966)
nurbsamp.f6 <- 335 / (0.4 * 5966)

sims.bisse6 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f6, urbsamp.f6)), simplify = F))
names(sims.bisse6) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd6 <- lapply(1:7, function(x) lapply(sims.bisse6[[x]], treestat, func = sscd))
stat.noto6 <- lapply(1:7, function(x) lapply(sims.bisse6[[x]], treestat, func = noto))
pval.sscd6 <- sapply(1:7, function(x) min(sum(stat.sscd6[[x]] >= sscd.obs), sum(stat.sscd6[[x]] <= sscd.obs)) / length(stat.sscd6[[x]]))
pval.noto6 <- sapply(1:7, function(x) min(sum(stat.noto6[[x]] <= noto.obs), sum(stat.noto6[[x]] >= noto.obs)) / length(stat.noto6[[x]]))

# Urban species are 70%

print("70% sampling")

urbsamp.f7 <- 590 / (0.7 * 5966)
nurbsamp.f7 <- 335 / (0.3 * 5966)

sims.bisse7 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f7, urbsamp.f7)), simplify = F))
names(sims.bisse7) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd7 <- lapply(1:7, function(x) lapply(sims.bisse7[[x]], treestat, func = sscd))
stat.noto7 <- lapply(1:7, function(x) lapply(sims.bisse7[[x]], treestat, func = noto))
pval.sscd7 <- sapply(1:7, function(x) min(sum(stat.sscd7[[x]] >= sscd.obs), sum(stat.sscd7[[x]] <= sscd.obs)) / length(stat.sscd7[[x]]))
pval.noto7 <- sapply(1:7, function(x) min(sum(stat.noto7[[x]] <= noto.obs), sum(stat.noto7[[x]] >= noto.obs)) / length(stat.noto7[[x]]))

# Urban species are 80%

print("80% sampling")

urbsamp.f8 <- 590 / (0.8 * 5966)
nurbsamp.f8 <- 335 / (0.2 * 5966)

sims.bisse8 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f8, urbsamp.f8)), simplify = F))
names(sims.bisse8) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd8 <- lapply(1:7, function(x) lapply(sims.bisse8[[x]], treestat, func = sscd))
stat.noto8 <- lapply(1:7, function(x) lapply(sims.bisse8[[x]], treestat, func = noto))
pval.sscd8 <- sapply(1:7, function(x) min(sum(stat.sscd8[[x]] >= sscd.obs), sum(stat.sscd8[[x]] <= sscd.obs)) / length(stat.sscd8[[x]]))
pval.noto8 <- sapply(1:7, function(x) min(sum(stat.noto8[[x]] <= noto.obs), sum(stat.noto8[[x]] >= noto.obs)) / length(stat.noto8[[x]]))

# Urban species are 90%

print("90% sampling")

urbsamp.f9 <- 590 / (0.9 * 5966)
nurbsamp.f9 <- 335 / (0.1 * 5966)

sims.bisse9 <- lapply(c(1:5, 7:8), function(x) replicate(1000, treesim(as.numeric(modelstable[x,]), N0 = 335, N1 = 590, sampling.f = c(nurbsamp.f9, urbsamp.f9)), simplify = F))
names(sims.bisse9) <- paste0("sim.", rownames(modelstable)[c(1:5, 7:8)])
stat.sscd9 <- lapply(1:7, function(x) lapply(sims.bisse9[[x]], treestat, func = sscd))
stat.noto9 <- lapply(1:7, function(x) lapply(sims.bisse9[[x]], treestat, func = noto))
pval.sscd9 <- sapply(1:7, function(x) min(sum(stat.sscd9[[x]] >= sscd.obs), sum(stat.sscd9[[x]] <= sscd.obs)) / length(stat.sscd9[[x]]))
pval.noto9 <- sapply(1:7, function(x) min(sum(stat.noto9[[x]] <= noto.obs), sum(stat.noto9[[x]] >= noto.obs)) / length(stat.noto9[[x]]))

restab <- cbind(pval.sscd1, pval.noto1, pval.sscd2, pval.noto2, pval.sscd3, pval.noto3, pval.sscd4, pval.noto4, pval.sscd5, pval.noto5, pval.sscd6, pval.noto6, pval.sscd7, pval.noto7, pval.sscd8, pval.noto8, pval.sscd9, pval.noto9)
rownames(restab) <- rownames(modelstable)[c(1:5, 7:8)]

